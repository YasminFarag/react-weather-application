{"version":3,"sources":["components/Forecasting.jsx","App.js","serviceWorker.js","index.js"],"names":["Forecasting","state","className","toggleDisplay","setState","calculate","Math","floor","this","props","temp","onSubmit","weather","type","value","input","name","placeholder","onChange","handleChange","onClick","show","date","city","country","description","src","icon","alt","humidity","wind","Component","App","e","preventDefault","target","elements","fetch","apiKey","then","res","json","data","Date","sys","main","speed","console","log","catch","error","textInput","toLocaleString","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e13abd12.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Forecasting.css';\n\nclass Forecasting extends Component {\nstate={\n  className:'hidden result'\n\n}\n\ntoggleDisplay=()=>{\n  // if(this.state.className)\n  this.setState({\n    className: 'result'\n  })\n} \n  render() {\n   \n    const calculate= Math.floor(this.props.temp)\n      return (\n        \n        <div>\n        <form onSubmit={this.props.weather}>\n            <input type='text' value={this.props.input} name=\"city\" placeholder=\"City....\" onChange={this.props.handleChange} />\n            <button onClick={this.toggleDisplay}>Search</button>\n                \n            </form>\n         {this.props.show ? <span className={this.state.className} >\n              {this.props.date && <span>{this.props.date}</span>}<br />\n            {this.props.city  && <span>{this.props.city},{this.props.country}</span>}<br />\n            {this.props.temp && <span>Temperature: {calculate}Â°</span>}<br />\n            {/* {this.props.country && <p>Country: {this.props.country}</p>} */}\n            {this.props.description && <span>Description: {this.props.description}</span>}\n            <img src={`http://openweathermap.org/img/wn/${this.props.icon}.png `} className=\"\" alt=\"wthr-img\" /><br />\n            \n            {this.props.humidity && <span>Humidity: {this.props.humidity} %</span>}<br />\n          {this.props.wind && <span>Wind Speed: {this.props.wind} Km/hr</span>}<br />\n            \n            \n            </span> : '' }\n            \n            </div>\n       \n      )\n\n    \n\n   \n  }\n}\n\nexport default Forecasting\n","import React, {Component} from 'react';\nimport './App.css';\nimport Forecasting from './components/Forecasting';\n//import { WiDaySunny } from 'weather-icons-react';\n\nclass App extends Component {\n   state ={\n      input:'',\n      date: '',\n      city:'',\n      country:'',\n      description:'',\n      temp:'',\n      humidity:'',\n      wind:'',\n      icon:'',\n      show: false,\n      \n\n    }\n    \n    weather=(e)=>{\n      e.preventDefault()\n    const city = e.target.elements.city.value;\n    fetch(`https://cors-anywhere.herokuapp.com/http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`)\n  \n  .then(res => res.json())\n  .then(data=>  this.setState({\n    \n        date: new Date(),\n        city: data.name,\n        country: data.sys.country,\n        description: data.weather[0].description,\n        icon : data.weather[0].icon,\n        temp:data.main.temp,\n        humidity:data.main.humidity,\n        wind:data.wind.speed,\n        input:'',\n        show:true,\n    \n}, () => console.log('data',data)\n) \n  )\n  .catch(error => console.log(error)) \n   \n  \n}\n    handleChange=(e)=>{\n      let textInput=e.target.value\n      this.setState({\n        input: textInput\n      })\n      console.log('input is : ',textInput);\n      \n    }\n\n    componentDidMount(){\n      this.setState({\n        date:''\n      })\n\n    }\n\n    \n  render() {\n    // if(this.state.description=== 'sunny'){\n    //   return(\n    //    <img src={`http://openweathermap.org/img/w/${this.state.icon}.png`} />\n    //   )\n    // }\n    \n    return (\n      <div className={\"App \"+ (this.state.description)} >\n        Welcome to Your weather App\n       \n      <Forecasting weather={this.weather} \n                    date={this.state.date.toLocaleString()}\n                    city={this.state.city} \n                    country={this.state.country} \n                    description={this.state.description}\n                    icon={this.state.icon}\n                    temp={this.state.temp} \n                    humidity={this.state.humidity} \n                    wind={this.state.wind}  \n                    handleChange={this.handleChange}\n                    input={this.state.input}\n                    show={this.state.show} />\n                    \n    </div>\n\n    )\n  }\n}\n\nlet apiKey = 'e8543a00592ac6e69e0a81d490af4226'\n\nexport default App\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}